// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shipping.Entities;

#nullable disable

namespace Shipping.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.Property<Guid>("CustomersCustomer_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersOrder_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomersCustomer_Id", "OrdersOrder_Id");

                    b.HasIndex("OrdersOrder_Id");

                    b.ToTable("CustomerOrder");
                });

            modelBuilder.Entity("EmployeePrivellge", b =>
                {
                    b.Property<Guid>("EmployeesEmployee_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrivillagesPrivellge_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeesEmployee_Id", "PrivillagesPrivellge_Id");

                    b.HasIndex("PrivillagesPrivellge_Id");

                    b.ToTable("EmployeePrivellge");
                });

            modelBuilder.Entity("GovermentSalesRepresentative", b =>
                {
                    b.Property<int>("GovermentsGoverment_Id")
                        .HasColumnType("int");

                    b.Property<Guid>("SalesRepresentativesSalesRepresentative_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GovermentsGoverment_Id", "SalesRepresentativesSalesRepresentative_Id");

                    b.HasIndex("SalesRepresentativesSalesRepresentative_Id");

                    b.ToTable("GovermentSalesRepresentative");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersOrder_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsProduct_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersOrder_Id", "ProductsProduct_Id");

                    b.HasIndex("ProductsProduct_Id");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("PrivellgeSalesRepresentative", b =>
                {
                    b.Property<Guid>("PrivellgesPrivellge_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalesRepresentativesSalesRepresentative_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivellgesPrivellge_Id", "SalesRepresentativesSalesRepresentative_Id");

                    b.HasIndex("SalesRepresentativesSalesRepresentative_Id");

                    b.ToTable("PrivellgeSalesRepresentative");
                });

            modelBuilder.Entity("PrivellgeTrader", b =>
                {
                    b.Property<Guid>("PrivellgesPrivellge_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TradersTrader_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivellgesPrivellge_Id", "TradersTrader_Id");

                    b.HasIndex("TradersTrader_Id");

                    b.ToTable("PrivellgeTrader");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("branchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("salesPersonSalesRepresentative_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("salesPersonSalesRepresentative_Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovermentId")
                        .HasColumnType("int");

                    b.Property<double>("NormalShippingCost")
                        .HasColumnType("float");

                    b.HasKey("City_Id");

                    b.HasIndex("GovermentId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("Customer_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goverment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Village")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Customer_Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Employee_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.HasKey("Employee_Id");

                    b.HasIndex("branchId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Goverment", b =>
                {
                    b.Property<int>("Goverment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Goverment_Id"));

                    b.Property<string>("GovermentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Goverment_Id");

                    b.ToTable("Goverments");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Order_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyBranch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DefaultCost")
                        .HasColumnType("float");

                    b.Property<double>("ExtraWeightCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("salesRepresentativeIdSalesRepresentative_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("shipping_type")
                        .HasColumnType("int");

                    b.Property<Guid>("traderIdTrader_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Order_Id");

                    b.HasIndex("salesRepresentativeIdSalesRepresentative_Id");

                    b.HasIndex("traderIdTrader_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Privellge", b =>
                {
                    b.Property<Guid>("Privellge_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrivellgeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Privellge_Id");

                    b.ToTable("Privellges");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Product_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SalesRepresentative", b =>
                {
                    b.Property<Guid>("SalesRepresentative_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompanyPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesRepresentative_Id");

                    b.ToTable("SalesRepresentatives");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SpecialPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<int>("Goverment_Id")
                        .HasColumnType("int");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<Guid>("Trader_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Goverment_Id");

                    b.HasIndex("Trader_Id");

                    b.ToTable("SpecialPackages");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Trader", b =>
                {
                    b.Property<Guid>("Trader_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<double>("CostPerRefusedOrder")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Trader_Id");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersCustomer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrder_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePrivellge", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployee_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Privellge", null)
                        .WithMany()
                        .HasForeignKey("PrivillagesPrivellge_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GovermentSalesRepresentative", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Goverment", null)
                        .WithMany()
                        .HasForeignKey("GovermentsGoverment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", null)
                        .WithMany()
                        .HasForeignKey("SalesRepresentativesSalesRepresentative_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrder_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProduct_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivellgeSalesRepresentative", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Privellge", null)
                        .WithMany()
                        .HasForeignKey("PrivellgesPrivellge_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", null)
                        .WithMany()
                        .HasForeignKey("SalesRepresentativesSalesRepresentative_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivellgeTrader", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Privellge", null)
                        .WithMany()
                        .HasForeignKey("PrivellgesPrivellge_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Trader", null)
                        .WithMany()
                        .HasForeignKey("TradersTrader_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Branch", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", "salesPerson")
                        .WithMany("Branchs")
                        .HasForeignKey("salesPersonSalesRepresentative_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("salesPerson");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.City", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Goverment", "goverment")
                        .WithMany("Cities")
                        .HasForeignKey("GovermentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("goverment");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Employee", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Branch", "branch")
                        .WithMany("Employees")
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Order", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", "salesRepresentativeId")
                        .WithMany("Orders")
                        .HasForeignKey("salesRepresentativeIdSalesRepresentative_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Trader", "traderId")
                        .WithMany("Orders")
                        .HasForeignKey("traderIdTrader_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("salesRepresentativeId");

                    b.Navigation("traderId");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SpecialPackage", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Goverment", "goverment")
                        .WithMany()
                        .HasForeignKey("Goverment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.Trader", "trader")
                        .WithMany()
                        .HasForeignKey("Trader_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");

                    b.Navigation("goverment");

                    b.Navigation("trader");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Goverment", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SalesRepresentative", b =>
                {
                    b.Navigation("Branchs");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Trader", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
