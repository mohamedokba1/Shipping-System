// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shipping.Entities;

#nullable disable

namespace Shipping.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BranchSalesRepresentative", b =>
                {
                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<long>("SalesRepresentativesSalesRepresentativeId")
                        .HasColumnType("bigint");

                    b.HasKey("BranchesId", "SalesRepresentativesSalesRepresentativeId");

                    b.HasIndex("SalesRepresentativesSalesRepresentativeId");

                    b.ToTable("BranchSalesRepresentative");
                });

            modelBuilder.Entity("GovermentSalesRepresentative", b =>
                {
                    b.Property<int>("GovermentsGoverment_Id")
                        .HasColumnType("int");

                    b.Property<long>("SalesRepresentativesSalesRepresentativeId")
                        .HasColumnType("bigint");

                    b.HasKey("GovermentsGoverment_Id", "SalesRepresentativesSalesRepresentativeId");

                    b.HasIndex("SalesRepresentativesSalesRepresentativeId");

                    b.ToTable("GovermentSalesRepresentative");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permission.goverments.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permission.goverments.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permission.goverments.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permission.goverments.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permission.cities.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permission.cities.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permission.cities.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permission.cities.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "permission.traders.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "permission.traders.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "permission.traders.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "permission.traders.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "permission.employees.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "permission.employees.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "permission.employees.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "permission.employees.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "permission.branches.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "permission.branches.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "permission.branches.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "permission.branches.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "permission.sales.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "permission.sales.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "permission.sales.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "permission.sales.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "permission.orders.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "permission.orders.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "permission.orders.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "permission.orders.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "permission.permissions.read",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "permission.permissions.update",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "permission.permissions.add",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "permission.permissions.delete",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "permission.orders.add",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "permission.orders.update",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "permission.orders.delete",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "permission.orders.read",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "permission.orders.update",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "permission.orders.read",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "permission.branches.read",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permission.cities.read",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permission.cities.update",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permission.cities.add",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "permission.goverments.read",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "permission.goverments.update",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "permission.goverments.add",
                            ClaimValue = "true",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "permission.orders.update",
                            ClaimValue = "true",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "permission.orders.read",
                            ClaimValue = "true",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "permission.branches.read",
                            ClaimValue = "true",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "permission.cities.read",
                            ClaimValue = "true",
                            RoleId = "4"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "permission.goverments.read",
                            ClaimValue = "true",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a960744-0651-4924-b58b-d6a33cc0aa20",
                            Email = "Admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELMrJ9t9b7BMRSi2KfJFCVypcfXQCPQvrWztw7SUUZUbOzXYEckRYCibyEmkbCVnrw==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59d9cf4b-92f1-4e98-8253-7616d7e3f373",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa9eeeee-2c69-4306-83e8-7321cf7c4909",
                            Email = "trader1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRADER1@EXAMPLE.COM",
                            NormalizedUserName = "TRADER1",
                            PasswordHash = "AQAAAAIAAYagAAAAECynPu4AYDfqqKpII+TOTtDEvOXT1WB/Y61KuoKhHWnnMwFP4Nkzv1DiMmC0FJpvDw==",
                            PhoneNumber = "01278555861",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de5c744a-fe04-4fb0-aeb0-9f0dda980826",
                            TwoFactorEnabled = false,
                            UserName = "trader1"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5114b571-1bd5-4123-833b-b568e63cc174",
                            Email = "employee1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE1@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9kLC0fvj96H3u0m+Fan08eOaf/75pwAqzvRPcf3UmowvFaAvBiGi3joT64PRvvTg==",
                            PhoneNumber = "01033325256",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "098d0030-444b-41d1-b1b9-c778843ef156",
                            TwoFactorEnabled = false,
                            UserName = "employee1"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "744be13a-a217-4bf7-82a0-f226659e7598",
                            Email = "sales1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SALES1@EXAMPLE.COM",
                            NormalizedUserName = "SALES1",
                            PasswordHash = "AQAAAAIAAYagAAAAEE3tV+5iRw52c4hGWylH8CK5HrVnGRMcFF8pT7E19EgVTuENsWSyEBo8/OZ/mKwyKw==",
                            PhoneNumber = "01033325256",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d35390e4-38a6-4eb6-b9da-74ad691578ce",
                            TwoFactorEnabled = false,
                            UserName = "sales1"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "735752d6-168f-4fa7-a08b-928ced38e683",
                            Email = "employee2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE2@EXAMPLE.COM",
                            NormalizedUserName = "EMPLOYEE2",
                            PasswordHash = "AQAAAAIAAYagAAAAELWzIbuHHT+InMsvxxkwmGmuRuzSRlZ9Ge/WL6cw1eMlQ2L9sFgA+CRyuHvJS4+JZw==",
                            PhoneNumber = "01033325256",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b0daaed-f93e-439d-8ddf-fe4bacb368ed",
                            TwoFactorEnabled = false,
                            UserName = "employee2"
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Date = "6/26/2023 7:11:55 AM",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Date = "6/26/2023 7:11:55 AM",
                            Name = "trader",
                            NormalizedName = "TRADER"
                        },
                        new
                        {
                            Id = "3",
                            Date = "6/26/2023 7:11:55 AM",
                            Name = "employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "4",
                            Date = "6/26/2023 7:11:55 AM",
                            Name = "salesrepresentative",
                            NormalizedName = "SALESREPRESENTATIVE"
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Cairo",
                            CreatedAt = new DateTime(2023, 6, 26, 7, 11, 55, 368, DateTimeKind.Local).AddTicks(8055),
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Giza",
                            CreatedAt = new DateTime(2023, 6, 26, 7, 11, 55, 368, DateTimeKind.Local).AddTicks(8124),
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Alexandria",
                            CreatedAt = new DateTime(2023, 6, 26, 7, 11, 55, 368, DateTimeKind.Local).AddTicks(8144),
                            State = true
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Sharqia",
                            CreatedAt = new DateTime(2023, 6, 26, 7, 11, 55, 368, DateTimeKind.Local).AddTicks(8146),
                            State = false
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovermentId")
                        .HasColumnType("int");

                    b.Property<double>("NormalShippingCost")
                        .HasColumnType("float");

                    b.Property<double>("PickupShippingCost")
                        .HasColumnType("float");

                    b.HasKey("City_Id");

                    b.HasIndex("GovermentId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            City_Id = 1,
                            CityName = "Cairo",
                            GovermentId = 1,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 2,
                            CityName = "Giza",
                            GovermentId = 1,
                            NormalShippingCost = 15.0,
                            PickupShippingCost = 5.0
                        },
                        new
                        {
                            City_Id = 3,
                            CityName = "Shubra El-Kheima",
                            GovermentId = 1,
                            NormalShippingCost = 20.0,
                            PickupShippingCost = 15.0
                        },
                        new
                        {
                            City_Id = 4,
                            CityName = "Cairo",
                            GovermentId = 1,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 5,
                            CityName = "Helwan",
                            GovermentId = 1,
                            NormalShippingCost = 35.0,
                            PickupShippingCost = 20.0
                        },
                        new
                        {
                            City_Id = 6,
                            CityName = "Alexandria",
                            GovermentId = 2,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 7,
                            CityName = "Borg El Arab",
                            GovermentId = 2,
                            NormalShippingCost = 15.0,
                            PickupShippingCost = 5.0
                        },
                        new
                        {
                            City_Id = 8,
                            CityName = "Abu Qir",
                            GovermentId = 2,
                            NormalShippingCost = 20.0,
                            PickupShippingCost = 15.0
                        },
                        new
                        {
                            City_Id = 9,
                            CityName = "Montaza",
                            GovermentId = 2,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 10,
                            CityName = "Miami",
                            GovermentId = 2,
                            NormalShippingCost = 35.0,
                            PickupShippingCost = 20.0
                        },
                        new
                        {
                            City_Id = 11,
                            CityName = "Giza",
                            GovermentId = 3,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 12,
                            CityName = "Al Haram",
                            GovermentId = 3,
                            NormalShippingCost = 15.0,
                            PickupShippingCost = 5.0
                        },
                        new
                        {
                            City_Id = 13,
                            CityName = "Sheikh Zayed City",
                            GovermentId = 3,
                            NormalShippingCost = 20.0,
                            PickupShippingCost = 15.0
                        },
                        new
                        {
                            City_Id = 14,
                            CityName = "6th of October City",
                            GovermentId = 3,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 15,
                            CityName = "Bulaq ad Dakrur",
                            GovermentId = 3,
                            NormalShippingCost = 35.0,
                            PickupShippingCost = 20.0
                        },
                        new
                        {
                            City_Id = 16,
                            CityName = "Mansoura",
                            GovermentId = 4,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 17,
                            CityName = "Talkha",
                            GovermentId = 4,
                            NormalShippingCost = 15.0,
                            PickupShippingCost = 5.0
                        },
                        new
                        {
                            City_Id = 18,
                            CityName = "Mit Ghamr",
                            GovermentId = 4,
                            NormalShippingCost = 20.0,
                            PickupShippingCost = 15.0
                        },
                        new
                        {
                            City_Id = 19,
                            CityName = "Aga",
                            GovermentId = 4,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 20,
                            CityName = "Sherbin",
                            GovermentId = 4,
                            NormalShippingCost = 35.0,
                            PickupShippingCost = 20.0
                        },
                        new
                        {
                            City_Id = 21,
                            CityName = "Zagazig",
                            GovermentId = 5,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 22,
                            CityName = "Belbeis",
                            GovermentId = 5,
                            NormalShippingCost = 15.0,
                            PickupShippingCost = 5.0
                        },
                        new
                        {
                            City_Id = 23,
                            CityName = "Abu Hammad",
                            GovermentId = 5,
                            NormalShippingCost = 20.0,
                            PickupShippingCost = 15.0
                        },
                        new
                        {
                            City_Id = 24,
                            CityName = "Abu Kebir",
                            GovermentId = 5,
                            NormalShippingCost = 30.0,
                            PickupShippingCost = 10.0
                        },
                        new
                        {
                            City_Id = 25,
                            CityName = "Kafr Saqr",
                            GovermentId = 5,
                            NormalShippingCost = 35.0,
                            PickupShippingCost = 20.0
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goverment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Village")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1L,
                            BranchId = 1,
                            Email = "employee1@example.com",
                            IsActive = true,
                            Name = "Ahmed Mohamed",
                            Password = "Employee@123",
                            PhoneNumber = "01033325256",
                            UserId = "3",
                            UserName = "employee1"
                        },
                        new
                        {
                            EmployeeId = 2L,
                            BranchId = 2,
                            Email = "employee2@example.com",
                            IsActive = false,
                            Name = "Sayed Sameh",
                            Password = "Employee@123",
                            PhoneNumber = "01033325256",
                            UserId = "5",
                            UserName = "employee2"
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Goverment", b =>
                {
                    b.Property<int>("Goverment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Goverment_Id"));

                    b.Property<string>("GovermentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Goverment_Id");

                    b.ToTable("Goverments");

                    b.HasData(
                        new
                        {
                            Goverment_Id = 1,
                            GovermentName = "Cairo",
                            State = true
                        },
                        new
                        {
                            Goverment_Id = 2,
                            GovermentName = "Alexandria",
                            State = true
                        },
                        new
                        {
                            Goverment_Id = 3,
                            GovermentName = "Giza",
                            State = true
                        },
                        new
                        {
                            Goverment_Id = 4,
                            GovermentName = "Dakahlia",
                            State = false
                        },
                        new
                        {
                            Goverment_Id = 5,
                            GovermentName = "Sharqia",
                            State = false
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBranch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("DeliveredToVillage")
                        .HasColumnType("bit");

                    b.Property<double>("ExtraWeightCost")
                        .HasColumnType("float");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<long?>("SalesRepresentativeId")
                        .HasColumnType("bigint");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("int");

                    b.Property<long?>("TraderId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesRepresentativeId");

                    b.HasIndex("TraderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Product", b =>
                {
                    b.Property<long>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Product_Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Product_Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SalesRepresentative", b =>
                {
                    b.Property<long>("SalesRepresentativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesRepresentativeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompanyPercentage")
                        .HasColumnType("float");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesRepresentativeId");

                    b.HasIndex("UserId");

                    b.ToTable("SalesRepresentatives");

                    b.HasData(
                        new
                        {
                            SalesRepresentativeId = 1L,
                            Address = "Cairo",
                            CompanyPercentage = 60.0,
                            DiscountType = 1,
                            Email = "sales1@example.com",
                            IsActive = true,
                            Name = "Mohamed Khaled",
                            Password = "Sales@123",
                            UserId = "4",
                            UserName = "sales1"
                        });
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SpecialPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("City_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Goverment_Id")
                        .HasColumnType("int");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<long?>("TraderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Goverment_Id");

                    b.HasIndex("TraderId");

                    b.ToTable("SpecialPackages");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Trader", b =>
                {
                    b.Property<long>("TraderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TraderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CostPerRefusedOrder")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraderId");

                    b.HasIndex("UserId");

                    b.ToTable("Traders");

                    b.HasData(
                        new
                        {
                            TraderId = 1L,
                            Address = "Cairo",
                            CompanyBranch = "Cairo",
                            CostPerRefusedOrder = 1.0,
                            Email = "trader1@example.com",
                            PhoneNumber = "01278555861",
                            UserId = "2",
                            UserName = "trader1"
                        });
                });

            modelBuilder.Entity("BranchSalesRepresentative", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", null)
                        .WithMany()
                        .HasForeignKey("SalesRepresentativesSalesRepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GovermentSalesRepresentative", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Goverment", null)
                        .WithMany()
                        .HasForeignKey("GovermentsGoverment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", null)
                        .WithMany()
                        .HasForeignKey("SalesRepresentativesSalesRepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.City", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Goverment", "goverment")
                        .WithMany("Cities")
                        .HasForeignKey("GovermentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("goverment");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Employee", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Order", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Shipping.Entities.Domain.Models.SalesRepresentative", "SalesRepresentative")
                        .WithMany("Orders")
                        .HasForeignKey("SalesRepresentativeId");

                    b.HasOne("Shipping.Entities.Domain.Models.Trader", "Trader")
                        .WithMany("Orders")
                        .HasForeignKey("TraderId");

                    b.Navigation("Customer");

                    b.Navigation("SalesRepresentative");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Product", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SalesRepresentative", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SpecialPackage", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("City_Id");

                    b.HasOne("Shipping.Entities.Domain.Models.Goverment", "goverment")
                        .WithMany()
                        .HasForeignKey("Goverment_Id");

                    b.HasOne("Shipping.Entities.Domain.Models.Trader", "trader")
                        .WithMany()
                        .HasForeignKey("TraderId");

                    b.Navigation("city");

                    b.Navigation("goverment");

                    b.Navigation("trader");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Trader", b =>
                {
                    b.HasOne("Shipping.Entities.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Goverment", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.SalesRepresentative", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Shipping.Entities.Domain.Models.Trader", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
